"-- Vundle --"
"----------------------------------------------------------------------"
filetype off                   " required!

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

"-- My Bundles here:
Plugin 'scrooloose/nerdcommenter'
  "plugin that allows for easy commenting of code for many filetypes
  map <leader>ca{ va{ \| <leader>cc
  map <leader>c% v% \| <leader>cc
Plugin 'scrooloose/nerdtree'
  "tree explorer plugin for navigating the filesystem
  nmap <leader>e :NERDTreeToggle<CR>
Plugin 'acx0/Conque-Shell'
  "Plugin 'Conque-Shell'
  "Should be checked for new versions on http://www.vim.org/scuipts/script.php?script_id=2771
  "Run interactive commands inside a Vim buffer
Plugin 'vim-scripts/upAndDown'
   "upAndDown : Swapping a line with the line directly above or below
   "By default, use <S-Up> and <S-Down> to move line or block of lines.
Plugin 'minibufexpl.vim'
  "Plugin 'fholgado/minibufexpl.vim' "{'name': 'minibuxexpl'}
  "Elegant buffer explorer
  "hi MBENormal               guifg=#808080 guibg=fg
  "hi MBEVisibleNormal        guifg=#5DC2D6 guibg=fg
  "hi MBEChanged              guifg=#CD5907 guibg=fg
  "hi MBEVisibleChanged       guifg=#F1266F guibg=fg
  "hi MBEVisibleActiveNormal  guifg=#A6DB29 guibg=fg
  "hi MBEVisibleActiveChanged guifg=#F1266F guibg=fg
Plugin 'mru.vim'
  "Plugin to manage Most Recently Used (MRU) files
Plugin 'ZoomWin'
  "Zoom in/out  of windows (toggle between one window and multi-window)
Plugin 'beloglazov/vim-online-thesaurus'
  "vim-online-thesaurus : A Vim plugin for looking up words in an online thesaurus
  "http://www.vim.org/scripts/script.php?script_id=4588
  "https://github.com/beloglazov/vim-online-thesaurus
Plugin 'suan/vim-instant-markdown'
  "instant-markdown.vim : Real-time Markdown previews from Vim!
  "https://github.com/suan/vim-instant-markdown
  "http://www.vim.org/scripts/script.php?script_id=3994
  " Installation:
  "   [sudo] gem install pygments.rb
  "   If you're using Ruby 1.9.2 or later,
  "     [sudo] gem install redcarpet.
  "   Otherwise,
  "     [sudo] gem install redcarpet -v 2.3.0
  "   [sudo] npm -g install instant-markdown-d
  "   If you're on Linux,
  "     the xdg-utils package needs to be installed (is installed by default on Ubuntu).
Plugin 'vim-scripts/TaskList.vim'
  "TaskList.vim : Eclipse like task list
  "http://www.vim.org/scripts/script.php?script_id=2607
  "https://github.com/vim-scripts/TaskList.vim
  " Map to view the task list.
  map <leader>tl <Plug>TaskList
  "The following keys are mapped to the results window:
  " q - Quit, and restore original cursor position.
  " e - Exit, and keep results window open note that
  " movements on the result window will no longer be
  " updated.
  " <cr> - Quit and place the cursor on the selected line.
  "
  " g:tlWindowPosition
  " This is specifies the position of the window to be opened. By
  " default it will open at on top. To overwrite use:
  let g:tlWindowPosition = 1
  " in your vimrc file, options are as follows:
  " 0 = Open on top
  " 1 = Open on the bottom
  "
  " g:tlTokenList
  " This is the list of tokens to search for default is
  " 'FIXME TODO XXX'. The results are groupped and displayed in the
  " order that they appear. to overwrite use:
  let g:tlTokenList = ['FIXME', 'TODO', 'XXX', 'NOTE']
  " in your vimrc file
  "
  " g:tlRememberPosition
  " If this is set to 1 then the script will try to get back to the
  " position where it last was closed. By default it will find the line
  " closest to the current cursor position.
  " to overwrite use:
  " let g:tlRememberPosition = 1
  " in your vimrc file
Plugin 'highlight.vim'
  " Line mode
  " <C-h><C-h>   Highlight current line
  " <C-h><C-a>   Advance color for next line highlight
  " <C-h><C-r>   Clear last line highlight
  "Pattern mode
  " <C-h><C-w>   Highlight word under cursor (whole word match)
  " <C-h><C-l>    Highlight all lines having word under cursor (whole word match)
  " <C-h><C-f>    Highlight word under cursor (partial word match)
  " <C-h><C-k>   Highlight all lines having word under cursor (partial word match)
  " <C-h><C-s>   Highlight last search pattern
  " <C-h><C-j>    Highlight all lines having last search pattern
  " <C-h><C-d>   Clear last pattern highlight
  " <C-h><C-n>   Clear all highlights
  " All above commands work in both normal & insert modes.
  " <C-h><C-h> also works in visual mode. (Select desired lines & hit <C-h><C-h>)
Plugin 'junegunn/goyo.vim'
  " Distraction-free writing in Vim
  " :Goyo [width]
  " You might map this to a key combo in your .vimrc like so:
  " nnoremap <Leader><Space> :Goyo<CR>
  "Configuration
       let g:goyo_width=120
  "    g:goyo_margin_top (default: 4)
  "    g:goyo_margin_bottom (default: 4)
  "    g:goyo_linenr (default: 0)
  "    g:goyo_callbacks ([before_funcref, after_funcref])

  function! Goyo_before()
    if has('gui_running')
      " disable MiniBufExp
      CMiniBufExplorer
      "MBEClose
      "wincmd w

      " disable ZoomWin
      if exists(":ZoomWin")
        delcommand ZoomWin
      endif
      silent! nunmap <Plug>ZoomWin

      " line numbers disabled by default
      set nu
    endif

    " set full screen
    call EnableFullScreen()
  endfunction

  function! Goyo_after()
    if has('gui_running')
      " enable MiniBufExp
      MiniBufExplorer

      " enable ZoomWin
      if exists("g:loaded_ZoomWinPlugin")
        command! ZoomWin call ZoomWin()
        nmap <Plug>ZoomWin call ZoomWin()
      endif
    endif

    " unset full screen
    call DisableFullScreen()
  endfunction
  let g:goyo_callbacks = [function('Goyo_before'), function('Goyo_after')]

Plugin 'jeffkreeftmeijer/vim-numbertoggle'  
" Toggles between relative and absolute line numbers automatically.
" http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
" In case g:UseNumberToggleTrigger is unset or true, NumberToggle sets
" up <C-n> to toggle from absolute to relative line numbers.
" You can set up another trigger if you prefer. If you want to
" toggle using <F2>, for example, put this into your ~/.vimrc file:
"   let g:NumberToggleTrigger="<F2>"

"---- Coding
Plugin 'vim-scripts/AutoComplPop'
  " Automatically opens popup menu for completions
  " http://www.vim.org/scripts/script.php?script_id=1879
  " To enable perl-completion.vim
  let g:acp_behaviorPerlOmniLength=0

"---- Motion
Plugin 'tpope/vim-endwise'
  "endwise.vim: wisely add 'end' in ruby
  "https://github.com/tpope/vim-endwise
  "http://www.vim.org/scripts/script.php?script_id=2386
Plugin 'jiangmiao/auto-pairs'
  "Auto Pairs : Insert or delete brackets, parens, quotes in pair
  "http://www.vim.org/scripts/script.php?script_id=3599
  "https://github.com/jiangmiao/auto-pairs
  "Toggle Autopairs
  let g:AutoPairsShortcutToggle = '<M-]>'
  "Fast Wrap
  "let g:AutoPairsShortcutFastWrap = '<M-)>'
  "Jump to next closed pair
  let g:AutoPairsShortcutJump = '<M-n>'
  map ) <M-n>
  "BackInsert
  "let g:AutoPairsShortcutBackInsert = '<M-C-b>'
  "function! AutoPairsHandler(char)
    "if !exists('g:AutoPairsShortcutToggle')
      "exec "normal a".a:char
    "else
      """let word_under_cursor = expand("<cword>")
      "let next_char = getline(".")[col(".")]
      ""echo next_char
      "if (next_char != "")
        "silent call AutoPairsToggle()
        "exec "normal i".a:char
        "silent call AutoPairsToggle()
        ""put='hello'
      ""else
        ""exec "normal i".a:char
      "endif
    "endif
  "endfunction
Plugin 'vim-scripts/textmanip.vim'
  "textmanip.vim : Maniplate(duplicate, move) selected text easily
  "https://github.com/vim-scripts/textmanip.vim
  "https://github.com/t9md/vim-textmanip
  "http://www.vim.org/scripts/script.php?script_id=3491
  xmap <S-j> <Plug>(textmanip-move-down-r)
  xmap <S-k> <Plug>(textmanip-move-up-r)
  xmap <S-h> <Plug>(textmanip-move-left)
  xmap <S-l> <Plug>(textmanip-move-right)
Plugin 'justinmk/vim-sneak'
  "Sneak is a Vim plugin that enables you to move to any location specified
  "by two characters.
  "It works across multiple lines; with operators (including repeat .);
  "and in visual mode.
  "Move to the next or previous match via ; or ,.
  "Move to the nth match by prefixing ; or , with a [count]
  "Sneak is invoked with s (sneak forward) or S (sneak backwards),
  "followed by exactly two characters.
  "Sneak is invoked with operators via z (because s is taken by surround.vim).
  "  Press dzqt to delete from the cursor up to the next instance of "qt".
  "      Press . to repeat the dzqt operation.
  "  Press gUz\} to upper-case the text from the cursor until the next instance
  "  of the literal text \}
  "  Press . to repeat the gUz\} operation.
  "https://github.com/justinmk/vim-sneak
Plugin 'catalinciurea/perl-nextmethod'
  "perl-nextmethod : ]m, ]M, [m, [M next/previous perl method motions
  "http://www.vim.org/scripts/script.php?script_id=4697
  "https://github.com/catalinciurea/perl-nextmethod
Plugin 'luochen1990/select-and-search'
  "select text in v mode, then press n to search next one (N for prev one)
  "https://github.com/luochen1990/select-and-search
  "http://www.vim.org/scripts/script.php?script_id=4819
  let g:select_and_search_active = 1
Plugin 'gcmt/wildfire.vim'
  "Smart selection of the closest text object
  "https://github.com/gcmt/wildfire.vim
  " This selects the next closest text object.
  "let g:wildfire_fuel_map = "<ENTER>"
  " This selects the previous closest text object.
  "let g:wildfire_water_map = "<BS>"

"---- Syntax
Plugin 'LaTeX-Box-Team/LaTeX-Box'
  "LaTeX Box : Lightweight Toolbox for LaTeX
  "http://www.vim.org/scripts/script.php?script_id=3109
  "https://github.com/LaTeX-Box-Team/LaTeX-Box

  "NOTE hardcoded for current TeX project
  "let g:main_tex_dir =  '/home/genadyp/Documents/Thesis/Thesis'
  "let b:main_tex_file = g:main_tex_dir . '/Thesis.tex'
  "let b:main_dvi_file = g:main_tex_dir . '/Thesis.dvi'
  "let b:main_pdf_file = g:main_tex_dir . '/Thesis.pdf'
  let g:LatexBox_latexmk_async = 1
  let g:LatexBox_latexmk_preview_continuously = 1
  let g:LatexBox_show_warnings = 0
  "let g:LatexBox_output_type = "dvi"
  let g:LatexBox_output_type = "pdf"
  "
  "Supports reverse search
  "http://vim.wikia.com/wiki/Vim_can_interact_with_xdvi
  "http://xdvi.sourceforge.net/inverse-search.html#vim
  "http://hermitte.free.fr/vim/ressources/vimfiles/ftplugin/tex/tex-tools_vim.html
  "NOTE gvim must be run with --servername vimtex
  "let g:LatexBox_viewer = 'xdvi -editor "gvim --servername vimtex --remote +\%l \%f"'
  "let g:LatexBox_viewer = 'zathura -x "gvim --servername vimtex -c \"let g:syncpdf=\'Thesis.pdf\'\" --remote +%{line} %{input}" Thesis.pdf'
  let g:LatexBox_viewer = 'zathura -x "gvim --servername vimtex --remote +\%l \%f"'

  "Forward search
  "map <leader>ld :silent execute '!xdvi -editor "gvim --servername 'v:servername' --remote-wait +\%l \%f" -sourceposition ' . line(".") . expand("%") . " "  b:main_dvi_file<CR>
  "map <leader>ld :silent execute '!zathura --synctex-forward ' . line(".") . ":1:" . b:main_tex_file . " " . b:main_pdf_file<CR>
  "map <leader>ld :silent execute "!zathura --synctex-forward " . line('.') . ":" . col('.') . ":" . bufname('%') . " " . b:main_pdf_file<CR><CR>
  map <leader>ld :execute "silent !zathura --synctex-forward " . line('.') . ":" . col('.') . ":" . bufname('%') . " " . g:syncpdf<CR><CR>

Plugin 'elzr/vim-json'
  "A syntax highlighting file for JSON
  "https://github.com/elzr/vim-json
Plugin 'hallison/vim-markdown'
  "Markdown syntax highlight for Vim editor with snippets support
  "https://github.com/hallison/vim-markdown
  "http://www.vim.org/scripts/script.php?script_id=2882
Plugin 'danchoi/ri.vim'
  "browse ri documentation from Vim
  "https://github.com/danchoi/ri.vim
  "Usage:
  "  <leader>r opens the search/autocomplete window,
  "            and will use a horizontal split to display matching documentation
  "  <leader>R opens the search/autocomplete window,
  "            and will use a vertical split to display matching documentatoin
  "  NOTE clashs with Thesarus
  "  <leader>K opens the search/autocomplete window
  "            and prefills it with the keyword under the cursor
  "  K is automatically remapped to use ri.vim if the current buffer
  "  is a *.rb file
  map <leader>r :call ri#OpenSearchPrompt(0)<cr>  " horizontal split
  map <leader>rk :call ri#LookupNameUnderCursor()<cr> " keyword lookup
  "Example:
  "  To look for String::gsub type String#gsub
Plugin 'ri-viewer'
"Plugin 'vim-scripts/ri-viewer'
  "ri-viewer.vim looks up ruby document directories with a keyword such like
  "class name or method.
  "https://github.com/vim-scripts/ri-viewer
  "http://www.vim.org/scripts/script.php?script_id=3621
  "Usage:
  "  <leader>ri to look for word under the cursor
  "  :Ri Object
  "  :Ri Object#help
  "  :Ri Object.help
  "  :RiCore
  "  :RiGem
  "  :RiHome
  let ri_prog = '/home/genadyp/.rvm/rubies/default/bin/ri'
Plugin 'c9s/perlomni.vim'
  " perl omnicompletion for vim
  " https://github.com/c9s/perlomni.vim
Plugin 'scrooloose/syntastic'
  " Syntax checking hacks for vim
  " You can see syntastic's idea of available checkers by running :SyntasticInfo
  " You can also run checkers explicitly by calling :SyntasticCheck <checker>
  " By default the location list is changed only when you run the :Errors
  " :SyntasticReset Resets the list of errors and turns off all error notifiers
  " https://github.com/scrooloose/syntastic
  " http://www.vim.org/scripts/script.php?script_id=2736
  map <F2> :SyntasticReset<CR>
  imap <F2> :SyntasticReset<CR>

  let g:syntastic_mode_map = { 'mode': 'active',
                               \ 'passive_filetypes': ['tex'] }

  " display together the errors found by all checkers enabled for the current file
  let g:syntastic_aggregate_errors = 1
  " To turn off all style messages:
  " let g:syntastic_quiet_messages = { "type": "style" }
  " To disable Errors Signs:
  " let g:syntastic_enable_signs = 0

  let g:syntastic_html_tidy_exec = '/home/genadyp/Downloads/App/HtmlTidy/tidy/bin/tidy'
  let g:syntastic_java_checkstyle_classpath = '/home/genadyp/Downloads/App/JavaCheckstyle/checkstyle-5.5/checkstyle-5.5-all.jar'
  "let let g:syntastic_ruby_exec = 'ruby2.1.1'
  let g:syntastic_tex_chktex_showmsgs = 0

  let g:syntastic_ruby_checkers = ['mri', 'rubocop', 'rubylint']
  " This checker runs perl -c against your file.
  " This can be a problem if you're trying to check third party files.
  " https://github.com/scrooloose/syntastic/wiki/Perl%3A---perl
  let g:syntastic_enable_perl_checker = 1
  " Perl checkers must be added manually when enabling Perl checking
  let g:syntastic_perl_checkers = ['perl', 'podchecker']
  let g:syntastic_perl_lib_path = [ './lib' ]

"---- Colors
Plugin 'ColorSchemeMenuMaker'
  "ColorSchemeMenuMaker : Auto-generates menu containing your colorschemes
  "(keywords: color scheme menu)
  "http://www.vim.org/scripts/script.php?script_id=2004
Plugin 'Son-of-Obisidian'
  " Plugin 'vim-scripts/Son-of-Obisidian'
  "Son of Obisidian : Port of Visual Studio 2010 Son of obsidian color scheme
Plugin 'vim-scripts/obsidian2.vim'
   "Obsidian2 Color scheme based on Notepad++ obsidian Color scheme
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
   "Molokai is a Vim port of the monokai theme for TextMate originally created by Wimer Hazenberg.
   "https://github.com/tomasr/molokai
Plugin 'sickill/vim-monokai'
   "https://github.com/sickill/vim-monokai
Plugin 'xoria256.vim'
   "xoria256.vim : Soft pastel gamma on dark background, same appearence in {,g}vim
   "http://www.vim.org/scripts/script.php?script_id=2140
Plugin 'veloce/vim-aldmeris'
   "aldmeris : A colorscheme based on oblivion for gedit that support GVIM and 256 colors term
   "http://www.vim.org/scripts/script.php?script_id=3673
   "https://github.com/veloce/vim-aldmeris
Plugin 'junegunn/seoul256.vim'
   "seoul256.vim : A low-contrast Vim color scheme based on Seoul Colors
   "http://www.vim.org/scripts/script.php?script_id=4605
   "https://github.com/junegunn/seoul256.vim
Plugin 'tango-morning.vim'
   "tango-morning.vim : Light Grey Tango color theme based on Morning
   "http://www.vim.org/scripts/script.php?script_id=2640
Plugin 'two2tango'
   "two2tango : Colorscheme based upon Tango palette
   "http://www.vim.org/scripts/script.php?script_id=1988
Plugin 'twilight'
   "twilight : A clone of Textmates twilight scheme
   "http://www.vim.org/scripts/script.php?script_id=1677
Plugin 'atelierbram/syntax-highlighting', {'rtp': 'atelier-schemes/output/vim/'}
Plugin 'donbass.vim'
   "donbass.vim : Finely tuned, 256 color, light-grey background colorscheme
   "http://www.vim.org/scripts/script.php?script_id=2730
Plugin 'jonathanfilip/vim-lucius'
   "Lucius : Light and dark color scheme for GUI and 256 color terminal.
   "https://github.com/jonathanfilip/vim-lucius
   "http://www.vim.org/scripts/script.php?script_id=2536
Plugin 'moria'
Plugin 'sienna'
Plugin 'freya'
Plugin 'chriskempson/base16-vim'
   "https://github.com/chriskempson/base16-vim
Plugin 'sonoma.vim'
   "sonoma.vim : An easy-breezy color theme that acts as a soothing balm for your eyes.
   "http://www.vim.org/scripts/script.php?script_id=4072
Plugin 'mayansmoke'
   "mayansmoke : Ergonomic light-background color scheme.
   "http://www.vim.org/scripts/script.php?script_id=3065
Plugin 'vim-scripts/lithochromatic'
   "LithoChromatic Color Theme for Vim - A low contrast color theme.
   "https://github.com/kayaalpg/lithochromatic-vim
   "http://www.vim.org/scripts/script.php?script_id=4406
Plugin 'darkspectrum'
   "darkspectrum : a gvim color scheme based on the oblivion color scheme for gedit
   "http://www.vim.org/scripts/script.php?script_id=2215
Plugin 'Zenburn'
   "Zenburn : Low contrast colour scheme for low light conditions
   "http://www.vim.org/scripts/script.php?script_id=415
   "https://github.com/jnurmine/Zenburn
Plugin 'DesertedOceanBurnt'
   "DesertedOceanBurnt : A dull, low saturation version of desertedocean
   "http://www.vim.org/scripts/script.php?script_id=1407
Plugin 'neutron.vim'
   "neutron.vim : Light background colorscheme
   "http://www.vim.org/scripts/script.php?script_id=2964
Plugin 'watermark'
   "watermark : a low contrast Color Scheme
   "http://www.vim.org/scripts/script.php?script_id=1471
Plugin 'yellow'
   "yellow : A yellow-green color scheme
   "http://www.vim.org/scripts/script.php?script_id=1474
Plugin 'genadyp/adobe.vim'
   "adobe.vim : Adobe theme, easy on eyes. Coloring philosophy inside
   "https://github.com/vim-scripts/adobe.vim
   "http://www.vim.org/scripts/script.php?script_id=1365
Plugin 'winter.vim'
   "winter.vim : light gray style
   "http://www.vim.org/scripts/script.php?script_id=2383
Plugin 'morhetz/gruvbox'
   "Retro groove color scheme for Vim
   "https://github.com/morhetz/gruvbox
Plugin 'vim-scripts/wombat256.vim'
   "Wombat for 256 color xterms
   "http://www.vim.org/scripts/script.php?script_id=2465
   "https://github.com/vim-scripts/wombat256.vim
Plugin 'vim-scripts/vilight.vim'
   "A more literal translation of Will Farrington's Twilight color theme
   "http://www.vim.org/scripts/script.php?script_id=2776
   "https://github.com/vim-scripts/vilight.vim
Plugin 'w0ng/vim-hybrid'
  "A dark colourscheme for Vim that combines the:
  "  colour palette from Tomorrow-Night.
  "  syntax group highlighting scheme from Jellybeans
  "  Vim code from Solarized
Plugin 'zeis/vim-kolor'
Plugin 'cocopon/iceberg.vim'
Plugin '29decibel/codeschool-vim-theme'
Plugin 'vim-scripts/darktango.vim'
Plugin 'jpo/vim-railscasts-theme'
Plugin 'reedes/vim-colors-pencil'
Plugin 'romainl/Apprentice'
Plugin 'jeetsukumaran/vim-nefertiti'
  "Three commands are provided to control the brightness levels:
  ":MochalatteBrighten, :MochalatteDarken, and MochalatteReset.
  "By default, META-2 (ALT-2 on some keyboards) increases the brightness of the text
  "while META-1 (ALT-1 on some keyboards) decreases the brightness of text.
  "These key-mappings can be suppressed and or customized:
Plugin 'whatyouhide/vim-gotham'
Plugin 'nice/sweater'
Plugin 'fmoralesc/vim-vitamins'
Plugin 'Keithbsmiley/parsec.vim'
Plugin 'freeo/vim-kalisi'
Plugin 'google/vim-colorscheme-primary'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on     " required!

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" NOTE: comments after Plugin command are not allowed..
